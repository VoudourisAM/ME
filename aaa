<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Snake Eating GitHub Contributions</title>
  <link rel="stylesheet" href="styles.css">
</head>
<body>
  <div class="contributions-container">
    <div id="contributions-grid"></div>
    <canvas id="snake-canvas"></canvas>
  </div>
  <script src="script.js"></script>
</body>
</html>

/* styles.css */
body {
  font-family: Arial, sans-serif;
  margin: 0;
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  background-color: #f4f4f4;
}

.contributions-container {
  position: relative;
  width: 80%;
  max-width: 1000px;
}

#contributions-grid {
  display: grid;
  grid-template-columns: repeat(52, 15px);
  grid-template-rows: repeat(7, 15px);
  gap: 2px;
  position: relative;
}

#contributions-grid div {
  width: 15px;
  height: 15px;
  background-color: #ddd;
  border-radius: 3px;
}

#contributions-grid div.active {
  background-color: #4caf50;
}

#snake-canvas {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
}

// script.js

// Generate the contribution grid
const grid = document.getElementById("contributions-grid");
const rows = 7;
const cols = 52;
const gridCells = [];

// Create grid cells and mark some as active
for (let row = 0; row < rows; row++) {
  for (let col = 0; col < cols; col++) {
    const cell = document.createElement("div");
    cell.dataset.row = row;
    cell.dataset.col = col;
    if (Math.random() > 0.7) cell.classList.add("active"); // Randomly active
    grid.appendChild(cell);
    gridCells.push(cell);
  }
}

// Snake properties
const canvas = document.getElementById("snake-canvas");
const ctx = canvas.getContext("2d");
canvas.width = grid.offsetWidth;
canvas.height = grid.offsetHeight;

let snake = [{ x: 0, y: 0 }]; // Starting position
let direction = { x: 1, y: 0 }; // Moving right
let speed = 200; // Snake speed (ms)
let growing = false;

// Draw the snake
function drawSnake() {
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  ctx.fillStyle = "#4caf50";
  snake.forEach((segment) => {
    ctx.fillRect(segment.x * 17 + 2, segment.y * 17 + 2, 13, 13); // Align with grid
  });
}

// Move the snake
function moveSnake() {
  const head = { x: snake[0].x + direction.x, y: snake[0].y + direction.y };

  // Check for collisions with walls
  if (head.x < 0 || head.x >= cols || head.y < 0 || head.y >= rows) {
    alert("Game Over! The snake hit the wall.");
    location.reload();
  }

  // Check if the snake eats a contribution
  const index = gridCells.findIndex(
    (cell) =>
      parseInt(cell.dataset.row) === head.y &&
      parseInt(cell.dataset.col) === head.x
  );
  if (index !== -1 && gridCells[index].classList.contains("active")) {
    gridCells[index].classList.remove("active");
    growing = true; // Snake grows when eating
  }

  // Move the snake
  snake.unshift(head); // Add new head
  if (!growing) snake.pop(); // Remove tail unless growing
  growing = false;
}

// Change direction based on arrow keys
window.addEventListener("keydown", (e) => {
  if (e.key === "ArrowUp" && direction.y === 0) direction = { x: 0, y: -1 };
  if (e.key === "ArrowDown" && direction.y === 0) direction = { x: 0, y: 1 };
  if (e.key === "ArrowLeft" && direction.x === 0) direction = { x: -1, y: 0 };
  if (e.key === "ArrowRight" && direction.x === 0) direction = { x: 1, y: 0 };
});

// Animate the snake
function animate() {
  moveSnake();
  drawSnake();
  setTimeout(animate, speed);
}

animate();
